// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`results unit tests renders body correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Body
    answers={Array []}
    playAgain={[MockFunction]}
    score={0}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div
        className="content"
      >
        <div
          className="header"
        >
          <p
            className="score good"
          >
            NaN
            %
          </p>
          <p>
            You got 
            0
             out of 
            0
             questions correct
          </p>
        </div>
        <div
          className="body results"
        />
        <div
          className="cta"
        >
          <a
            className="btn"
            onClick={[MockFunction]}
          >
            Play again
          </a>
        </div>
      </div>,
      "className": "results container",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="header"
          >
            <p
              className="score good"
            >
              NaN
              %
            </p>
            <p>
              You got 
              0
               out of 
              0
               questions correct
            </p>
          </div>,
          <div
            className="body results"
          />,
          <div
            className="cta"
          >
            <a
              className="btn"
              onClick={[MockFunction]}
            >
              Play again
            </a>
          </div>,
        ],
        "className": "content",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <p
                className="score good"
              >
                NaN
                %
              </p>,
              <p>
                You got 
                0
                 out of 
                0
                 questions correct
              </p>,
            ],
            "className": "header",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  NaN,
                  "%",
                ],
                "className": "score good",
              },
              "ref": null,
              "rendered": Array [
                NaN,
                "%",
              ],
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "You got ",
                  0,
                  " out of ",
                  0,
                  " questions correct",
                ],
              },
              "ref": null,
              "rendered": Array [
                "You got ",
                0,
                " out of ",
                0,
                " questions correct",
              ],
              "type": "p",
            },
          ],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [],
            "className": "body results",
          },
          "ref": null,
          "rendered": Array [],
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <a
              className="btn"
              onClick={[MockFunction]}
            >
              Play again
            </a>,
            "className": "cta",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Play again",
              "className": "btn",
              "onClick": [MockFunction],
            },
            "ref": null,
            "rendered": "Play again",
            "type": "a",
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="content"
        >
          <div
            className="header"
          >
            <p
              className="score good"
            >
              NaN
              %
            </p>
            <p>
              You got 
              0
               out of 
              0
               questions correct
            </p>
          </div>
          <div
            className="body results"
          />
          <div
            className="cta"
          >
            <a
              className="btn"
              onClick={[MockFunction]}
            >
              Play again
            </a>
          </div>
        </div>,
        "className": "results container",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="header"
            >
              <p
                className="score good"
              >
                NaN
                %
              </p>
              <p>
                You got 
                0
                 out of 
                0
                 questions correct
              </p>
            </div>,
            <div
              className="body results"
            />,
            <div
              className="cta"
            >
              <a
                className="btn"
                onClick={[MockFunction]}
              >
                Play again
              </a>
            </div>,
          ],
          "className": "content",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <p
                  className="score good"
                >
                  NaN
                  %
                </p>,
                <p>
                  You got 
                  0
                   out of 
                  0
                   questions correct
                </p>,
              ],
              "className": "header",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    NaN,
                    "%",
                  ],
                  "className": "score good",
                },
                "ref": null,
                "rendered": Array [
                  NaN,
                  "%",
                ],
                "type": "p",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    "You got ",
                    0,
                    " out of ",
                    0,
                    " questions correct",
                  ],
                },
                "ref": null,
                "rendered": Array [
                  "You got ",
                  0,
                  " out of ",
                  0,
                  " questions correct",
                ],
                "type": "p",
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [],
              "className": "body results",
            },
            "ref": null,
            "rendered": Array [],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <a
                className="btn"
                onClick={[MockFunction]}
              >
                Play again
              </a>,
              "className": "cta",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Play again",
                "className": "btn",
                "onClick": [MockFunction],
              },
              "ref": null,
              "rendered": "Play again",
              "type": "a",
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`results unit tests renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Results
    user_answers={
      Object {
        "all_answers": Array [],
        "score": 0,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "answers": Array [],
      "playAgain": [Function],
      "score": 0,
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "answers": Array [],
        "playAgain": [Function],
        "score": 0,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`results unit tests renders show results 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ShowResult
    question="Fake string"
    resultType="Failed"
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <p>
        <span
          className="Failed"
        >
          <FaClose />
        </span>
        <span
          dangerouslySetInnerHTML={
            Object {
              "__html": "Fake string",
            }
          }
        />
      </p>,
      "className": "result-card",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <span
            className="Failed"
          >
            <FaClose />
          </span>,
          <span
            dangerouslySetInnerHTML={
              Object {
                "__html": "Fake string",
              }
            }
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <FaClose />,
            "className": "Failed",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "span",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "dangerouslySetInnerHTML": Object {
              "__html": "Fake string",
            },
          },
          "ref": null,
          "rendered": null,
          "type": "span",
        },
      ],
      "type": "p",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <p>
          <span
            className="Failed"
          >
            <FaClose />
          </span>
          <span
            dangerouslySetInnerHTML={
              Object {
                "__html": "Fake string",
              }
            }
          />
        </p>,
        "className": "result-card",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <span
              className="Failed"
            >
              <FaClose />
            </span>,
            <span
              dangerouslySetInnerHTML={
                Object {
                  "__html": "Fake string",
                }
              }
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <FaClose />,
              "className": "Failed",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "span",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "dangerouslySetInnerHTML": Object {
                "__html": "Fake string",
              },
            },
            "ref": null,
            "rendered": null,
            "type": "span",
          },
        ],
        "type": "p",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
